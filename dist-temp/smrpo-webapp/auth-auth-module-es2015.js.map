{"version":3,"sources":["./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.module.ts","./src/app/auth/login/login.component.ts","./src/app/auth/login/login.component.html","./src/app/services/auth.service.ts"],"names":[],"mappings":"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","file":"auth-auth-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { LoginComponent } from './login/login.component';\r\n\r\nconst routes: Routes = [\r\n  { path: \"\", redirectTo: \"login\", pathMatch: \"full\" },\r\n  { path: \"login\", component: LoginComponent }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule {}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\n\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\nimport { LoginComponent } from './login/login.component';\r\n\r\n@NgModule({\r\n  declarations: [LoginComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    AuthRoutingModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule\r\n  ]\r\n})\r\nexport class AuthModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AuthService } from '../../services/auth.service';\r\n\r\n@Component({\r\n  selector: \"app-login\",\r\n  templateUrl: \"./login.component.html\",\r\n  styleUrls: [\"./login.component.scss\"]\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  form: FormGroup;\r\n\r\n  errorMatcher = new LoginErrorStateMatcher();\r\n\r\n  usernameError: string;\r\n  passwordError: string;\r\n\r\n  constructor(\r\n    formBuilder: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {\r\n    this.form = formBuilder.group({\r\n      username: [\"\", Validators.required],\r\n      password: [\"\", Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  onLogin() {\r\n    if (this.form.invalid) {\r\n      this.form.markAllAsTouched();\r\n      return;\r\n    }\r\n\r\n    delete this.usernameError;\r\n    delete this.passwordError;\r\n\r\n    this.authService.login(this.form.value).subscribe(\r\n      () => {\r\n        this.router.navigate([\"/dashboard\"]);\r\n      },\r\n      err => {\r\n        if (err.body.message === \"Wrong password\") {\r\n          this.password.setErrors({ error: true });\r\n          this.passwordError = err.body.message;\r\n        } else {\r\n          this.username.setErrors({ error: true });\r\n          this.usernameError = err.body.message;\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  get username() {\r\n    return this.form.get(\"username\");\r\n  }\r\n\r\n  get password() {\r\n    return this.form.get(\"password\");\r\n  }\r\n}\r\n\r\nclass LoginErrorStateMatcher implements ErrorStateMatcher {\r\n  isErrorState(control: FormControl): boolean {\r\n    return control.touched && !!control.errors;\r\n  }\r\n}\r\n","<div class=\"login-container\">\r\n  <form class=\"login-form\" [formGroup]=\"form\" (submit)=\"onLogin()\">\r\n    <h1>KanBan</h1>\r\n    <mat-form-field appearance=\"standard\">\r\n      <mat-label>Username</mat-label>\r\n      <input\r\n        matInput\r\n        formControlName=\"username\"\r\n        [errorStateMatcher]=\"errorMatcher\"\r\n      />\r\n      <mat-error *ngIf=\"usernameError\">{{ usernameError }}</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"standard\">\r\n      <mat-label>Password</mat-label>\r\n      <input\r\n        matInput\r\n        type=\"password\"\r\n        formControlName=\"password\"\r\n        [errorStateMatcher]=\"errorMatcher\"\r\n      />\r\n      <mat-error *ngIf=\"passwordError\">{{ passwordError }}</mat-error>\r\n    </mat-form-field>\r\n\r\n    <button\r\n      mat-raised-button\r\n      type=\"submit\"\r\n      color=\"primary\"\r\n      style=\"margin-top: 10px;\"\r\n    >\r\n      Login\r\n    </button>\r\n  </form>\r\n</div>\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { tap } from 'rxjs/operators';\r\n\r\nimport { User } from '../interfaces/user.interface';\r\nimport { RootStore } from '../store/root.store';\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class AuthService {\r\n  constructor(private http: HttpClient, private rootStore: RootStore) {}\r\n\r\n  login(data: { username: string; password: string }) {\r\n    return this.http\r\n      .post<User>(\"auth/login\", data)\r\n      .pipe(tap(user => this.rootStore.userStore.setUser(user)));\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}