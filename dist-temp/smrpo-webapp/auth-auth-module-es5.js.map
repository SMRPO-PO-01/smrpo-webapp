{"version":3,"sources":["webpack:///src/app/auth/auth-routing.module.ts","webpack:///src/app/auth/auth.module.ts","webpack:///src/app/auth/login/login.component.ts","webpack:///src/app/auth/login/login.component.html","webpack:///src/app/services/auth.service.ts"],"names":["routes","path","redirectTo","pathMatch","component","AuthRoutingModule","forChild","imports","exports","AuthModule","declarations","LoginComponent","formBuilder","authService","router","errorMatcher","LoginErrorStateMatcher","form","group","username","required","password","invalid","markAllAsTouched","usernameError","passwordError","login","value","subscribe","navigate","err","body","message","setErrors","error","get","onLogin","selector","templateUrl","styleUrls","control","touched","errors","AuthService","http","rootStore","data","post","pipe","user","userStore","setUser","providedIn"],"mappings":"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","file":"auth-auth-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { LoginComponent } from './login/login.component';\r\n\r\nconst routes: Routes = [\r\n  { path: \"\", redirectTo: \"login\", pathMatch: \"full\" },\r\n  { path: \"login\", component: LoginComponent }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule {}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\n\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\nimport { LoginComponent } from './login/login.component';\r\n\r\n@NgModule({\r\n  declarations: [LoginComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    AuthRoutingModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule\r\n  ]\r\n})\r\nexport class AuthModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AuthService } from '../../services/auth.service';\r\n\r\n@Component({\r\n  selector: \"app-login\",\r\n  templateUrl: \"./login.component.html\",\r\n  styleUrls: [\"./login.component.scss\"]\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  form: FormGroup;\r\n\r\n  errorMatcher = new LoginErrorStateMatcher();\r\n\r\n  usernameError: string;\r\n  passwordError: string;\r\n\r\n  constructor(\r\n    formBuilder: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {\r\n    this.form = formBuilder.group({\r\n      username: [\"\", Validators.required],\r\n      password: [\"\", Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  onLogin() {\r\n    if (this.form.invalid) {\r\n      this.form.markAllAsTouched();\r\n      return;\r\n    }\r\n\r\n    delete this.usernameError;\r\n    delete this.passwordError;\r\n\r\n    this.authService.login(this.form.value).subscribe(\r\n      () => {\r\n        this.router.navigate([\"/dashboard\"]);\r\n      },\r\n      err => {\r\n        if (err.body.message === \"Wrong password\") {\r\n          this.password.setErrors({ error: true });\r\n          this.passwordError = err.body.message;\r\n        } else {\r\n          this.username.setErrors({ error: true });\r\n          this.usernameError = err.body.message;\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  get username() {\r\n    return this.form.get(\"username\");\r\n  }\r\n\r\n  get password() {\r\n    return this.form.get(\"password\");\r\n  }\r\n}\r\n\r\nclass LoginErrorStateMatcher implements ErrorStateMatcher {\r\n  isErrorState(control: FormControl): boolean {\r\n    return control.touched && !!control.errors;\r\n  }\r\n}\r\n","<div class=\"login-container\">\r\n  <form class=\"login-form\" [formGroup]=\"form\" (submit)=\"onLogin()\">\r\n    <h1>KanBan</h1>\r\n    <mat-form-field appearance=\"standard\">\r\n      <mat-label>Username</mat-label>\r\n      <input\r\n        matInput\r\n        formControlName=\"username\"\r\n        [errorStateMatcher]=\"errorMatcher\"\r\n      />\r\n      <mat-error *ngIf=\"usernameError\">{{ usernameError }}</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"standard\">\r\n      <mat-label>Password</mat-label>\r\n      <input\r\n        matInput\r\n        type=\"password\"\r\n        formControlName=\"password\"\r\n        [errorStateMatcher]=\"errorMatcher\"\r\n      />\r\n      <mat-error *ngIf=\"passwordError\">{{ passwordError }}</mat-error>\r\n    </mat-form-field>\r\n\r\n    <button\r\n      mat-raised-button\r\n      type=\"submit\"\r\n      color=\"primary\"\r\n      style=\"margin-top: 10px;\"\r\n    >\r\n      Login\r\n    </button>\r\n  </form>\r\n</div>\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { tap } from 'rxjs/operators';\r\n\r\nimport { User } from '../interfaces/user.interface';\r\nimport { RootStore } from '../store/root.store';\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class AuthService {\r\n  constructor(private http: HttpClient, private rootStore: RootStore) {}\r\n\r\n  login(data: { username: string; password: string }) {\r\n    return this.http\r\n      .post<User>(\"auth/login\", data)\r\n      .pipe(tap(user => this.rootStore.userStore.setUser(user)));\r\n  }\r\n}\r\n"]}